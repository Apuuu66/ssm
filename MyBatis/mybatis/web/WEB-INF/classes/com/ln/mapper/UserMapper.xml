<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!--
 namespace 命名空间，作用就是对sql进行分类化管理,理解为sql隔离
 注意：使用mapper代理方法开发，namespace有特殊重要的作用
 -->
<mapper namespace="com.ln.mapper.UserMapper">
    <select id="findUserById" parameterType="java.lang.Integer"
            resultType="com.ln.pojo.User">SELECT * FROM `user` WHERE id = #{id}</select>
    <select id="findUserByUserName" parameterType="java.lang.String" resultType="com.ln.pojo.User">
        SELECT * from user WHERE username LIKE #{NAME}
    </select>
    <select id="findUserByName" parameterType="java.lang.String" resultType="com.ln.pojo.User">
        SELECT * from user WHERE username LIKE '%${value}%'
    </select>


    <insert id="insertUser" parameterType="com.ln.pojo.User">
        <selectKey keyProperty="id" order="AFTER" resultType="java.lang.Integer">
            SELECT LAST_INSERT_ID()
        </selectKey>
        INSERT INTO `user` (`username`, `birthday`, `sex`, `address`) VALUES (#{username}, #{birthday}, #{sex},
        #{address})
    </insert>

    <!--设置主键-->
    <insert id="setUUID" parameterType="com.ln.pojo.Uuid">
        <selectKey keyProperty="id" order="BEFORE" resultType="java.lang.String">
            SELECT UUID_SHORT()
        </selectKey>
        INSERT INTO `uuid` (`id`, `name`) VALUES (#{id}, #{name})
    </insert>

    <delete id="deleteUser" parameterType="java.lang.Integer">
        DELETE FROM `user` WHERE (`id`=#{id})
    </delete>

    <update id="updateUser" parameterType="com.ln.pojo.User">
        UPDATE `user` SET `address`=#{address} WHERE (`id`=#{id})
    </update>

    <select id="findUserByVo" parameterType="com.ln.pojo.QueryVo" resultType="com.ln.pojo.User">
        SELECT * FROM `user` where username LIKE '%${user.username}%' and sex = #{user.sex}
    </select>

    <!--if-->
    <!--<select id="findUserByCondition" parameterType="com.ln.pojo.User" resultType="com.ln.pojo.User">-->
    <!--SELECT * FROM USER WHERE 1=1-->
    <!--<if test="username!=null and username != ''">-->
    <!--and username LIKE '%${username}%'-->
    <!--</if>-->
    <!--<if test="sex != null">-->
    <!--and sex = #{sex}-->
    <!--</if>-->
    <!--</select>-->

    <!--动态包含-->
    <select id="findUserByCondition" parameterType="com.ln.pojo.User" resultType="com.ln.pojo.User">
        SELECT * FROM USER
        <include refid="user_where"/>
    </select>

    <!--sql片段-->
    <sql id="user_where">
        <where>
            <if test="username!=null and username != ''">
                and username LIKE '%${username}%'
            </if>
            <if test="sex != null">
                and sex = #{sex}
            </if>
        </where>
    </sql>
    <!--foreach-->
    <select id="findUserByIds" parameterType="com.ln.pojo.QueryVo" resultType="com.ln.pojo.User">
        SELECT * FROM USER
        <if test="list != null">
            <where>
                <foreach collection="list" item="id" open="id in (" close=")" separator=",">
                    #{id}
                </foreach>
            </where>
        </if>
    </select>


    <!-- 一对一:自动映射 -->
    <select id="findOrdersAndUser" resultType="com.ln.pojo.CustomOrders">
        select a.*, b.id uid, username, birthday, sex, address
        from orders a, user b
        where a.user_id = b.id
    </select>

    <!-- 一对一:手动映射 -->
    <!--
    id:resultMap的唯一标识
    type:将查询出的数据放入这个指定的对象中
    注意:手动映射需要指定数据库中表的字段名与java中pojo类的属性名称的对应关系
     -->
    <resultMap type="com.ln.pojo.Orders" id="orderAndUserResultMap">
        <!-- id标签指定主键字段对应关系
        column:列,数据库中的字段名称
        property:属性,java中pojo中的属性名称
         -->
        <id column="id" property="id"/>

        <!-- result:标签指定非主键字段的对应关系 -->
        <result column="user_id" property="userId"/>
        <result column="number" property="number"/>
        <result column="createtime" property="createtime"/>
        <result column="note" property="note"/>

        <!-- 这个标签指定单个对象的对应关系
        property:指定将数据放入Orders中的user属性中
        javaType:user属性的类型
        -->
        <association property="user" javaType="com.ln.pojo.User">
            <id column="uid" property="id"/>
            <result column="username" property="username"/>
            <result column="birthday" property="birthday"/>
            <result column="sex" property="sex"/>
            <result column="address" property="address"/>
        </association>
    </resultMap>
    <select id="findOrdersAndUser2" resultMap="orderAndUserResultMap">
        select a.*, b.id uid, username, birthday, sex, address
        from orders a, user b
        where a.user_id = b.id
    </select>

    <resultMap type="com.ln.pojo.User" id="userAndOrdersResultMap">
        <id column="id" property="id"/>
        <result column="username" property="username"/>
        <result column="birthday" property="birthday"/>
        <result column="sex" property="sex"/>
        <result column="address" property="address"/>

        <!-- 指定对应的集合对象关系映射
        property:将数据放入User对象中的ordersList属性中
        ofType:指定ordersList属性的泛型类型
         -->
        <collection property="ordersList" ofType="com.ln.pojo.Orders">
            <id column="oid" property="id"/>
            <result column="user_id" property="userId"/>
            <result column="number" property="number"/>
            <result column="createtime" property="createtime"/>
        </collection>
    </resultMap>
    <select id="findUserAndOrders" resultMap="userAndOrdersResultMap">
        select a.*, b.id oid ,user_id, number, createtime
        from user a, orders b where a.id = b.user_id
    </select>
</mapper>